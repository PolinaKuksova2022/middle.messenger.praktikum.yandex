import ChatsController from '../../controllers/ChatsController';
import GroupUsers from '../../groupUsers/gropUsers';
import Block from '../../utils/core/Block';
import { State, withStore } from '../../utils/core/Store';
import isEqual from '../../utils/isEqual';
import { toggleActiveChatModal } from '../../utils/toggleModal';
import { inputIn, inputOut } from '../../utils/validate/inputValid';
import InputGroup from '../form/inputGroup';
import KebabMenu from '../menu/kebabMenu';
import MessageImg from './messageImg';
import MessageText from './messegeText';

class BaseActiveChat extends Block {
  init() {
    this.children.menu = new KebabMenu({
      text: '',
      events: {
        click: () => {
          if (this.props.activeChat.id) toggleActiveChatModal();
        },
      },
    });
    // this.children.from = new MessageText({
    //   text: '–ü—Ä–∏–≤–µ—Ç! –°–º–æ—Ç—Ä–∏, —Ç—É—Ç –≤—Å–ø–ª—ã–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫—É—Å–æ–∫ –ª—É–Ω–Ω–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –ù–ê–°–ê –≤ –∫–∞–∫–æ–π-—Ç–æ –º–æ–º–µ–Ω—Ç –ø–æ–ø—Ä–æ—Å–∏–ª–∞ –•–∞—Å—Å–µ–ª—å–±–ª–∞–¥ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å SWC –¥–ª—è –ø–æ–ª–µ—Ç–æ–≤ –Ω–∞ –õ—É–Ω—É. –°–µ–π—á–∞—Å –º—ã –≤—Å–µ –∑–Ω–∞–µ–º —á—Ç–æ –∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç—ã –ª–µ—Ç–∞–ª–∏ —Å –º–æ–¥–µ–ª—å—é 500 EL ‚Äî –∏ –∫ —Å–ª–æ–≤—É –≥–æ–≤–æ—Ä—è, –≤—Å–µ —Ç—É—à–∫–∏ —ç—Ç–∏—Ö –∫–∞–º–µ—Ä –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –õ—É–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –∞—Å—Ç—Ä–æ–Ω–∞–≤—Ç—ã —Å —Å–æ–±–æ–π –∑–∞–±—Ä–∞–ª–∏ —Ç–æ–ª—å–∫–æ –∫–∞—Å—Å–µ—Ç—ã —Å –ø–ª–µ–Ω–∫–æ–π. –•–∞—Å—Å–µ–ª—å–±–ª–∞–¥ –≤ –∏—Ç–æ–≥–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª SWC –¥–ª—è –∫–æ—Å–º–æ—Å–∞, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –Ω–∞ —Ä–∞–∫–µ—Ç—É –æ–Ω–∏ —Ç–∞–∫ –Ω–∏–∫–æ–≥–¥–∞ –∏ –Ω–µ –ø–æ–ø–∞–ª–∏. –í—Å–µ–≥–æ –∏—Ö –±—ã–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ 25 —à—Ç—É–∫, –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ –∑–∞ 45000 –µ–≤—Ä–æ.',
    //   data: '11:56',
    // });
    // this.children.img = new MessageImg({
    //   path: 'static/message_img.png',
    //   data: '12:00',
    // });
    // this.children.to = new MessageText({
    //   text: '–ö—Ä—É—Ç–æ!',
    //   data: '12:00',
    // });

    this.children.group = new InputGroup({
      name: 'message',
      label: '–°–æ–æ–±—â–µ–Ω–∏–µ',
      inputClass: 'input-message',
      id: 'message',
      type: 'text',
      events: {
        focusout: (event) => inputOut(event),
        focusin: (event) => inputIn(event),
      },
      placeholder: '–°–æ–æ–±—â–µ–Ω–∏–µ',
    });

    this.children.menu.element?.classList.add('kebab-menu');
    // this.children.from.element?.classList.add(...['message__item', 'message__item-from']);
    // this.children.img.element?.classList.add(...['message__item', 'message__item-from']);
    // this.children.to.element?.classList.add(...['message__item', 'message__item-to']);
    this.children.group.element?.classList.add('message__input');
  }

  componentDidUpdate(oldProps: any, newProps: any): boolean {
    if (!isEqual(oldProps, newProps)) {
      this.renderChatUsers();
    }
    return !isEqual(oldProps, newProps);
  }

  renderChatUsers() {
    if (this.props.activeChat && this.props.activeChatUsers) {
      this.children.img = this.props.activeChatUsers.map(
        (user: any) =>
          new GroupUsers({
            src: user.avatar,
            name: user.login,
          })
      );
    }
  }

  render() {
    this.renderChatUsers();

    return this.compile(
      `
      <div class="message__header">
        {{#if activeChat.title}}
          <section class="message__author">
            {{{img}}}
            <h4 class="dialogue__author">{{ activeChat.title }}</h4>  
          </section>
          {{/if}}
        {{{menu}}}
      </div>
      {{#if user.id}}
        <div class="message__field">
          {{{from}}}
          {{{img}}}
          {{{to}}}
        </div>
        <div class="message__footer">  
          {{{group}}}
          <button class="button round-btn" >‚ûù</button>
        </div>
      {{/if}}
      `,
      { ...this.props }
    );
  }
}

function mapStateToProps(state: State) {
  return {
    activeChat: state.activeChat,
    activeChatUsers: state.activeChatUsers,
  };
}

export const ActiveChat = withStore(mapStateToProps)(BaseActiveChat);
// <button class="button attach-btn">üìé</button>
// <img name="avatar" class="avatar__img dialogue__img"  src="{{avatar}}" alt=""/>
